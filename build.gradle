plugins {
	id 'java'
	id 'jacoco'
	id 'org.springframework.boot' version '3.3.5'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'org.sonarqube' version '5.1.0.4882'
}

group = 'com.gruppe6'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.xerial:sqlite-jdbc:3.39.2.0'
	implementation 'org.hibernate.orm:hibernate-core:6.2.7.Final'
    implementation 'org.hibernate.orm:hibernate-community-dialects:6.2.7.Final'
	implementation 'org.springdoc:springdoc-openapi-ui:1.6.14'
	implementation 'org.springframework.boot:spring-boot-starter-mail'
	implementation 'com.itextpdf:itext7-core:7.1.16'
	implementation 'org.springframework.boot:spring-boot-starter-aop'


	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	testImplementation 'org.mockito:mockito-core:5.2.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.2.0'
	testImplementation 'org.aspectj:aspectjweaver'
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

tasks.named('test') {
	useJUnitPlatform()
	testLogging{
		events "passed"
	}
	finalizedBy(jacocoTestReport)
}

jacocoTestReport {
    dependsOn test 
    reports {
        xml.required.set(true)
        csv.required.set(false)
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}

sonar {
  properties {
    property "sonar.projectKey", "pqhuy1396_econsult"
    property "sonar.organization", "pqhuy1396"
	property "sonar.login", ""
    property "sonar.host.url", "https://sonarcloud.io"
	property "sonar.test", "src/test"
  }
}